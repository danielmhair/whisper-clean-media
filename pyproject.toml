[tool.poetry]
name = "media_cleaner"
version = "0.1.0"
description = ""
authors = ["Daniel Hair <danielmhair@gmail.com>"]
readme = "README.md"

[tool.pytest.ini_options]
log_cli = true
log_cli_format = "%(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[[tool.poetry.source]]
name = "whisper-clean-media"
url = "https://github.com/danielmhair/whisper-clean-media"

[tool.poetry.dependencies]
python = ">=3.8,<3.11"
moviepy = "^1.0.3"
ffmpeg = "^1.4"
pydub = "^0.25.1"
alt-profanity-check = "^1.3.0"
sklearn = "^0.0.post9"
spleeter = "^2.4.0"
pydantic = "^2.3.0"


[tool.poetry.dev-dependencies]
pytest-mock = "^3.7.0"
pytest-cov = "^2.11.1"
python-semantic-release = "^7.27.1"
commitizen = "^2.23.0"
pre-commit = "^2.18.1"
flake8 = "^3.9.0"
poethepoet = "^0.10.0"
pytest = "^7.1.1"
yapf = "^0.32.0"

[tool.semantic_release]
branch = "main"
version_toml = [
    "pyproject.toml:tool.poetry.version"
]
version_source = "commit"
tag_commit = true
pre_commit_command = "pip install poetry && poetry build"
build_command = "python setup.py sdist bdist_wheel"
commit_subject = "[skip ci] {version}"
commit_author = "qualiti-bot <admin@qualiti.ai>"
upload_to_repository = false
upload_to_release = true
remove_dist = true
tag_format = "{version}"

[tool.pyright]
include = ["media_cleaner"]
exclude = [
    "**/output",
    "**/__pycache__"
]
pythonVersion = "3.8.10"
pythonPlatform = "Windows"

strictParameterNoneValue = false
reportGeneralTypeIssues = false
reportOptionalMemberAccess = false

[tool.yapf]
based_on_style = "pep8"
column_limit = 160
dedent_closing_brackets = true

[tool.poe.tasks]
test = { "cmd" = "pytest tests --cov=tests", "help" = "Run all tests and get Code Coverage Report" }
lint = [{ "ref" = "_lint-syntax" }, { "ref" = "_lint-full" }]
_lint-syntax = { "cmd" = "flake8 ./ ./tests --select=E9,F63,F7,F82 --show-source", "help" = "Lint for syntax error and undefined names" }
_lint-full = { "cmd" = "flake8 ./ ./tests --exit-zero --max-complexity=10", "help" = "Lint for style, complexity, and everything else" }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
